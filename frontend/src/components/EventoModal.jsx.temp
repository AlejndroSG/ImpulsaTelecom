import React, { useState, useEffect, useRef } from 'react'
import { format, parse } from 'date-fns'
import { es } from 'date-fns/locale'
import { FaCalendarAlt, FaClock, FaUsers, FaUser, FaTrash, FaSave, FaTimes } from 'react-icons/fa'
import { MdColorLens, MdDescription, MdTitle, MdEvent, MdClose } from 'react-icons/md'

const EventoModal = ({ evento, onClose, onSave, onDelete, tiposEventos, isDarkMode, soloLectura = false }) => {
  // Asegurar que las fechas sean objetos Date válidos
  const inicioFecha = evento.inicio ? new Date(evento.inicio) : new Date()
  const finFecha = evento.fin ? new Date(evento.fin) : new Date(new Date().setHours(inicioFecha.getHours() + 1))
  
  // Colores para los diferentes tipos de eventos (mismo objeto que en Calendario.jsx)
  const coloresEventos = {
    evento: '#3788d8',
    tarea: '#f59e0b',
    reunion: '#4f46e5',
    fichaje: '#10b981',
    formacion: '#f97316',
    proyecto: '#ec4899',
    ausencia: '#6b7280',
    personal: '#3788d8',     // Azul para eventos personales
    departamental: '#8b5cf6'  // Morado para eventos departamentales
  }
  
  const [eventoEditado, setEventoEditado] = useState({
    ...evento,
    inicio: inicioFecha,
    fin: finFecha,
    color: evento.color || coloresEventos[evento.tipo || 'evento'] // Inicializar con el color según el tipo
  })
  
  // Estados para manejar los valores de texto de las fechas
  const [fechaInicioTexto, setFechaInicioTexto] = useState('')
  const [fechaFinTexto, setFechaFinTexto] = useState('')
  const [errorInicio, setErrorInicio] = useState('')
  const [errorFin, setErrorFin] = useState('')
  
  // Referencias para los inputs reales de tipo date/datetime-local
  const inicioInputRef = useRef(null)
  const finInputRef = useRef(null)
  
  // Actualizar estado cuando cambia el evento, preservando las fechas
  useEffect(() => {
    // Solo actualizar si el ID del evento ha cambiado o si es un nuevo evento
    if (evento.id !== eventoEditado.id || evento.modo === 'crear') {
      const nuevoInicio = evento.inicio ? new Date(evento.inicio) : new Date()
      const nuevoFin = evento.fin ? new Date(evento.fin) : new Date(new Date().setHours(nuevoInicio.getHours() + 1))
      
      setEventoEditado({
        ...evento,
        inicio: nuevoInicio,
        fin: nuevoFin,
        color: evento.color || coloresEventos[evento.tipo || 'evento'] // Inicializar con el color según el tipo
      })
    }
  }, [evento.id, evento.modo])
  
  // Formatear fechas para mostrar al usuario (formato español)
  const formatearFechaParaMostrar = (fecha) => {
    if (!fecha) return ''
    try {
      const fechaObj = fecha instanceof Date ? fecha : new Date(fecha)
      if (isNaN(fechaObj.getTime())) throw new Error('Fecha inválida')
      
      return format(fechaObj, eventoEditado.diaCompleto ? 'dd/MM/yyyy' : 'dd/MM/yyyy HH:mm', { locale: es })
    } catch (error) {
      console.error('Error al formatear fecha para mostrar:', error)
      return ''
    }
  }
  
  // Actualizar los textos de fecha cuando cambia eventoEditado
  useEffect(() => {
    setFechaInicioTexto(formatearFechaParaMostrar(eventoEditado.inicio))
    setFechaFinTexto(formatearFechaParaMostrar(eventoEditado.fin))
  }, [eventoEditado.inicio, eventoEditado.fin, eventoEditado.diaCompleto])
  
  // Formatear fechas para inputs de tipo date y datetime-local
  const formatearFechaParaInput = (fecha, incluirHora = true) => {
    if (!fecha) return ''
    try {
      const fechaObj = fecha instanceof Date ? fecha : new Date(fecha)
      if (isNaN(fechaObj.getTime())) return ''
      
      // Para inputs de tipo date, solo necesitamos YYYY-MM-DD
      if (!incluirHora) {
        return fechaObj.toISOString().split('T')[0]
      }
      
      // Para inputs de tipo datetime-local, necesitamos YYYY-MM-DDThh:mm
      const year = fechaObj.getFullYear()
      const month = String(fechaObj.getMonth() + 1).padStart(2, '0')
      const day = String(fechaObj.getDate()).padStart(2, '0')
      const hours = String(fechaObj.getHours()).padStart(2, '0')
      const minutes = String(fechaObj.getMinutes()).padStart(2, '0')
      
      return `${year}-${month}-${day}T${hours}:${minutes}`
    } catch (error) {
      console.error('Error al formatear fecha para input:', error)
      return ''
    }
  }
  
  // Parsear texto de fecha en formato español a objeto Date
  const parsearFechaDesdeTexto = (textoFecha, esDiaCompleto) => {
    try {
      // Intentar parsear en formato español
      const formatoEsperado = esDiaCompleto ? 'dd/MM/yyyy' : 'dd/MM/yyyy HH:mm'
      return parse(textoFecha, formatoEsperado, new Date(), { locale: es })
    } catch (error) {
      console.error('Error al parsear fecha desde texto:', error)
      return null
    }
  }
  
  // Manejar cambio en el texto de fecha de inicio
  const handleFechaInicioTextoChange = (e) => {
    const nuevoTexto = e.target.value
    setFechaInicioTexto(nuevoTexto)
    
    try {
      const nuevaFecha = parsearFechaDesdeTexto(nuevoTexto, eventoEditado.diaCompleto)
      
      if (!nuevaFecha || isNaN(nuevaFecha.getTime())) {
        setErrorInicio('Formato de fecha inválido')
        return
      }
      
      setErrorInicio('')
      setEventoEditado(prev => ({
        ...prev,
        inicio: nuevaFecha
      }))
      
      // Si la fecha de inicio es posterior a la de fin, actualizar la de fin
      if (eventoEditado.fin && nuevaFecha > eventoEditado.fin) {
        const nuevaFechaFin = new Date(nuevaFecha)
        nuevaFechaFin.setHours(nuevaFecha.getHours() + 1)
        
        setEventoEditado(prev => ({
          ...prev,
          fin: nuevaFechaFin
        }))
        setFechaFinTexto(formatearFechaParaMostrar(nuevaFechaFin))
      }
    } catch (error) {
      console.error('Error al procesar fecha de inicio:', error)
      setErrorInicio('Formato de fecha inválido')
    }
  }
  
  // Manejar cambio en el texto de fecha de fin
  const handleFechaFinTextoChange = (e) => {
    const nuevoTexto = e.target.value
    setFechaFinTexto(nuevoTexto)
    
    try {
      const nuevaFecha = parsearFechaDesdeTexto(nuevoTexto, eventoEditado.diaCompleto)
      
      if (!nuevaFecha || isNaN(nuevaFecha.getTime())) {
        setErrorFin('Formato de fecha inválido')
        return
      }
      
      // Verificar que la fecha de fin es posterior a la de inicio
      if (eventoEditado.inicio && nuevaFecha < eventoEditado.inicio) {
        setErrorFin('La fecha de fin debe ser posterior a la de inicio')
        return
      }
      
      setErrorFin('')
      setEventoEditado(prev => ({
        ...prev,
        fin: nuevaFecha
      }))
    } catch (error) {
      console.error('Error al procesar fecha de fin:', error)
      setErrorFin('Formato de fecha inválido')
    }
  }
  
  // Manejar cambios en otros campos del formulario
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target
    
    // Para inputs tipo checkbox
    if (type === 'checkbox') {
      setEventoEditado(prev => ({
        ...prev,
        [name]: checked
      }))
      
      // Si es la opción de día completo, actualizar el formato de fechas
      if (name === 'diaCompleto') {
        // Actualizar los textos de fechas para reflejar el cambio de formato
        setTimeout(() => {
          setFechaInicioTexto(formatearFechaParaMostrar(eventoEditado.inicio))
          setFechaFinTexto(formatearFechaParaMostrar(eventoEditado.fin))
        }, 0)
      }
      return
    }
    
    // Para campos de fechas manejados directamente desde inputs de tipo date/datetime-local
    if (name === 'inicio' || name === 'fin') {
      let fechaObj = null
      
      try {
        if (value) {
          // Para inputs de tipo date/datetime-local, el formato ya es compatible con Date
          fechaObj = new Date(value)
          
          if (name === 'inicio') {
            // Si la fecha de inicio cambia, actualizar el texto
            setFechaInicioTexto(formatearFechaParaMostrar(fechaObj))
            setErrorInicio('')
            
            // Si la nueva fecha de inicio es posterior a la de fin, actualizar la de fin
            if (eventoEditado.fin && fechaObj > eventoEditado.fin) {
              const nuevaFechaFin = new Date(fechaObj)
              nuevaFechaFin.setHours(fechaObj.getHours() + 1)
              
              setEventoEditado(prev => ({
                ...prev,
                fin: nuevaFechaFin
              }))
              setFechaFinTexto(formatearFechaParaMostrar(nuevaFechaFin))
            }
          } else if (name === 'fin') {
            // Si la fecha de fin cambia, actualizar el texto
            setFechaFinTexto(formatearFechaParaMostrar(fechaObj))
            setErrorFin('')
          }
        }
      } catch (error) {
        console.error(`Error al procesar la fecha de ${name}:`, error)
        return // Si hay error, no actualizar el estado
      }
      
      setEventoEditado(prev => ({
        ...prev,
        [name]: fechaObj
      }))
      return
    }
    
    // Para el cambio de tipo de evento, actualizar también el color predeterminado
    if (name === 'tipo') {
      setEventoEditado(prev => ({
        ...prev,
        tipo: value,
        color: coloresEventos[value] || prev.color // Actualizar color según el tipo
      }))
      return
    }
    
    // Para otros campos de texto/select
    setEventoEditado(prev => ({
      ...prev,
      [name]: value
    }))
  }
  
  // Manejar el guardado del evento
  const handleSave = () => {
    // Validar que tenemos todas las propiedades necesarias
    if (!eventoEditado.titulo?.trim()) {
      alert('El título es obligatorio')
      return
    }
    
    if (!eventoEditado.inicio || !eventoEditado.fin) {
      alert('Las fechas de inicio y fin son obligatorias')
      return
    }
    
    if (eventoEditado.inicio > eventoEditado.fin) {
      alert('La fecha de fin debe ser posterior a la de inicio')
      return
    }
    
    // Preparar el evento para ser guardado (asegurarse de que las fechas son strings ISO)
    const eventoParaGuardar = {
      ...eventoEditado,
      inicio: eventoEditado.inicio.toISOString(),
      fin: eventoEditado.fin.toISOString()
    }
    
    // Llamar a la función de guardado proporcionada por el componente padre
    onSave(eventoParaGuardar)
  }
  
  // Manejar la eliminación del evento
  const handleDelete = () => {
    if (window.confirm('¿Estás seguro de eliminar este evento?')) {
      onDelete(eventoEditado.id)
    }
  }
  
  return (
    <div className={`fixed inset-0 z-50 overflow-y-auto ${isDarkMode ? 'dark' : ''}`}>
      <div className="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
        {/* Overlay oscuro */}
        <div
          className="fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75"
          onClick={onClose}
        />

        {/* Centro el modal */}
        <span className="hidden sm:inline-block sm:align-middle sm:h-screen">&#8203;</span>

        {/* Contenido del modal */}
        <div
          className={`inline-block w-full max-w-xl p-5 my-8 overflow-hidden text-left align-middle transition-all transform rounded-lg shadow-xl ${
            isDarkMode ? 'bg-gray-800 text-white' : 'bg-white text-gray-900'
          }`}
        >
          {/* Cabecera del modal */}
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-medium leading-6">
              {eventoEditado.id ? 'Editar Evento' : 'Nuevo Evento'}
            </h3>
            <button
              type="button"
              onClick={onClose}
              className="inline-flex items-center justify-center p-1 text-gray-400 hover:text-gray-500 focus:outline-none"
            >
              <MdClose className="w-5 h-5" />
            </button>
          </div>

          <div className="space-y-4">
            {/* Título y descripción */}
            <div>
              <label
                htmlFor="titulo"
                className="font-medium text-sm mb-1.5 flex items-center"
              >
                <MdTitle className="mr-1.5 text-green-500" /> Título*
              </label>
              <input
                type="text"
                id="titulo"
                name="titulo"
                value={eventoEditado.titulo || ''}
                onChange={handleChange}
                placeholder="Título del evento"
                required
                className={`w-full px-3 py-2.5 rounded-lg ${
                  isDarkMode
                    ? 'bg-gray-700 text-white border-gray-600 focus:border-green-500'
                    : 'bg-white text-gray-900 border-gray-300 focus:border-green-500'
                } border shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50`}
                disabled={soloLectura}
              />
            </div>

            <div>
              <label
                htmlFor="descripcion"
                className="font-medium text-sm mb-1.5 flex items-center"
              >
                <MdDescription className="mr-1.5 text-green-500" /> Descripción
              </label>
              <textarea
                id="descripcion"
                name="descripcion"
                value={eventoEditado.descripcion || ''}
                onChange={handleChange}
                placeholder="Descripción del evento (opcional)"
                rows="3"
                className={`w-full px-3 py-2.5 rounded-lg ${
                  isDarkMode
                    ? 'bg-gray-700 text-white border-gray-600 focus:border-green-500'
                    : 'bg-white text-gray-900 border-gray-300 focus:border-green-500'
                } border shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50`}
                disabled={soloLectura}
              />
            </div>

            {/* Tipo y color */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
              <div>
                <label
                  htmlFor="tipo"
                  className="font-medium text-sm mb-1.5 flex items-center"
                >
                  <MdEvent className="mr-1.5 text-green-500" /> Tipo de evento*
                </label>
                <select
                  id="tipo"
                  name="tipo"
                  value={eventoEditado.tipo || 'evento'}
                  onChange={handleChange}
                  className={`w-full px-3 py-2.5 rounded-lg ${
                    isDarkMode
                      ? 'bg-gray-700 text-white border-gray-600 focus:border-green-500'
                      : 'bg-white text-gray-900 border-gray-300 focus:border-green-500'
                  } border shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50`}
                  disabled={soloLectura}
                >
                  {tiposEventos.map((tipo) => (
                    <option key={tipo.valor} value={tipo.valor}>
                      {tipo.etiqueta}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label
                  htmlFor="color"
                  className="font-medium text-sm mb-1.5 flex items-center"
                >
                  <MdColorLens className="mr-1.5 text-green-500" /> Color
                </label>
                <div className="relative">
                  <input
                    type="color"
                    id="color"
                    name="color"
                    value={eventoEditado.color || '#3788d8'}
                    onChange={handleChange}
                    className="w-full h-10 p-1 rounded-lg border"
                    disabled={soloLectura}
                  />
                </div>
              </div>
            </div>

            {/* Visibilidad */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
              <div>
                <label
                  htmlFor="visibilidad"
                  className="font-medium text-sm mb-1.5 flex items-center"
                >
                  <FaUsers className="mr-1.5 text-green-500" /> Visibilidad
                </label>
                <select
                  id="visibilidad"
                  name="visibilidad"
                  value={eventoEditado.visibilidad || 'personal'}
                  onChange={handleChange}
                  className={`w-full px-3 py-2.5 rounded-lg ${
                    isDarkMode
                      ? 'bg-gray-700 text-white border-gray-600 focus:border-green-500'
                      : 'bg-white text-gray-900 border-gray-300 focus:border-green-500'
                  } border shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50`}
                  disabled={soloLectura}
                >
                  <option value="personal">Personal (solo yo)</option>
                  <option value="departamental">Departamental</option>
                  <option value="empresa">Toda la empresa</option>
                </select>
              </div>

              <div className="flex items-end">
                <div className="flex items-center h-10">
                  <input
                    type="checkbox"
                    id="diaCompleto"
                    name="diaCompleto"
                    checked={eventoEditado.diaCompleto || false}
                    onChange={handleChange}
                    className="w-4 h-4 mr-2 text-green-600 border-gray-300 rounded focus:ring-green-500"
                    disabled={soloLectura}
                  />
                  <label
                    htmlFor="diaCompleto"
                    className="font-medium text-sm flex items-center"
                  >
                    <FaCalendarAlt className="mr-1.5" /> Todo el día
                  </label>
                </div>
              </div>
            </div>
            
            {/* Fechas de inicio y fin */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
              <div>
                <label
                  htmlFor="inicio_texto"
                  className="font-medium text-sm mb-1.5 flex items-center"
                >
                  <FaClock className="mr-1.5 text-green-500" /> Inicio*
                </label>
                <div className="relative">
                  <input
                    type="text"
                    id="inicio_texto"
                    name="inicio_texto"
                    value={fechaInicioTexto}
                    onChange={handleFechaInicioTextoChange}
                    placeholder={eventoEditado.diaCompleto ? "DD/MM/AAAA" : "DD/MM/AAAA HH:MM"}
                    required
                    className={`w-full px-3 py-2.5 rounded-lg ${
                      isDarkMode
                        ? 'bg-gray-700 text-white border-gray-600 focus:border-green-500'
                        : 'bg-white text-gray-900 border-gray-300 focus:border-green-500'
                    } border shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50`}
                    disabled={soloLectura}
                  />
                  <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                    <FaCalendarAlt className={isDarkMode ? 'text-gray-400' : 'text-green-500'} />
                  </div>
                </div>
                {errorInicio && <p className="mt-1 text-sm text-red-500">{errorInicio}</p>}
                {/* Input oculto para el formato nativo */}
                <input
                  type={eventoEditado.diaCompleto ? "date" : "datetime-local"}
                  id="inicio"
                  name="inicio"
                  ref={inicioInputRef}
                  value={formatearFechaParaInput(eventoEditado.inicio, !eventoEditado.diaCompleto)}
                  onChange={handleChange}
                  className="sr-only"
                  disabled={soloLectura}
                />
              </div>

              <div>
                <label
                  htmlFor="fin_texto"
                  className="font-medium text-sm mb-1.5 flex items-center"
                >
                  <FaClock className="mr-1.5 text-green-500" /> Fin*
                </label>
                <div className="relative">
                  <input
                    type="text"
                    id="fin_texto"
                    name="fin_texto"
                    value={fechaFinTexto}
                    onChange={handleFechaFinTextoChange}
                    placeholder={eventoEditado.diaCompleto ? "DD/MM/AAAA" : "DD/MM/AAAA HH:MM"}
                    required
                    className={`w-full px-3 py-2.5 rounded-lg ${
                      isDarkMode
                        ? 'bg-gray-700 text-white border-gray-600 focus:border-green-500'
                        : 'bg-white text-gray-900 border-gray-300 focus:border-green-500'
                    } border shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50`}
                    disabled={soloLectura}
                  />
                  <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                    <FaCalendarAlt className={isDarkMode ? 'text-gray-400' : 'text-green-500'} />
                  </div>
                </div>
                {errorFin && <p className="mt-1 text-sm text-red-500">{errorFin}</p>}
                {/* Input oculto para el formato nativo */}
                <input
                  type={eventoEditado.diaCompleto ? "date" : "datetime-local"}
                  id="fin"
                  name="fin"
                  ref={finInputRef}
                  value={formatearFechaParaInput(eventoEditado.fin, !eventoEditado.diaCompleto)}
                  onChange={handleChange}
                  className="sr-only"
                  disabled={soloLectura}
                />
              </div>
            </div>

            {/* Botón de acción */}
            <div className="flex justify-end pt-4 space-x-3">
              {!soloLectura && eventoEditado.id && (
                <button
                  type="button"
                  onClick={handleDelete}
                  className="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-lg shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50"
                >
                  <FaTrash className="inline-block mr-2" /> Eliminar
                </button>
              )}
              {!soloLectura && (
                <button
                  type="button"
                  onClick={handleSave}
                  className="px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-lg shadow-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50"
                >
                  <FaSave className="inline-block mr-2" /> Guardar
                </button>
              )}
              <button
                type="button"
                onClick={onClose}
                className={`px-4 py-2 text-sm font-medium rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-opacity-50 ${
                  isDarkMode
                    ? 'bg-gray-700 text-white hover:bg-gray-600 focus:ring-gray-500'
                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300 focus:ring-gray-400'
                }`}
              >
                <FaTimes className="inline-block mr-2" /> {soloLectura ? 'Cerrar' : 'Cancelar'}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default EventoModal
