import React, { useState, useEffect, useRef } from 'react'
import { format, parse } from 'date-fns'
import { es } from 'date-fns/locale'
import { FaCalendarAlt, FaClock, FaUsers, FaUser, FaTrash, FaSave, FaTimes } from 'react-icons/fa'
import { MdColorLens, MdDescription, MdTitle, MdEvent, MdClose } from 'react-icons/md'

const EventoModal = ({ evento, onClose, onSave, onDelete, tiposEventos, isDarkMode, soloLectura = false }) => {
  // Asegurar que las fechas sean objetos Date válidos
  const inicioFecha = evento.inicio ? new Date(evento.inicio) : new Date()
  const finFecha = evento.fin ? new Date(evento.fin) : new Date(new Date().setHours(inicioFecha.getHours() + 1))
  
  // Colores para los diferentes tipos de eventos
  const coloresEventos = {
    evento: '#3788d8',
    tarea: '#f59e0b',
    reunion: '#4f46e5',
    fichaje: '#10b981',
    formacion: '#f97316',
    proyecto: '#ec4899',
    ausencia: '#6b7280',
    personal: '#3788d8',     // Azul para eventos personales
    departamental: '#8b5cf6'  // Morado para eventos departamentales
  }
  
  const [eventoEditado, setEventoEditado] = useState({
    ...evento,
    inicio: inicioFecha,
    fin: finFecha,
    color: evento.color || coloresEventos[evento.tipo || 'evento'] // Inicializar con el color según el tipo
  })
  
  // Estados para manejar los valores de texto de las fechas
  const [fechaInicioTexto, setFechaInicioTexto] = useState('')
  const [fechaFinTexto, setFechaFinTexto] = useState('')
  const [errorInicio, setErrorInicio] = useState('')
  const [errorFin, setErrorFin] = useState('')
  
  // Referencias para los inputs reales de tipo date/datetime-local
  const inicioInputRef = useRef(null)
  const finInputRef = useRef(null)
  
  // Actualizar estado cuando cambia el evento, preservando las fechas
  useEffect(() => {
    // Solo actualizar si el ID del evento ha cambiado o si es un nuevo evento
    if (evento.id !== eventoEditado.id || evento.modo === 'crear') {
      const nuevoInicio = evento.inicio ? new Date(evento.inicio) : new Date()
      const nuevoFin = evento.fin ? new Date(evento.fin) : new Date(new Date().setHours(nuevoInicio.getHours() + 1))
      
      setEventoEditado({
        ...evento,
        inicio: nuevoInicio,
        fin: nuevoFin,
        color: evento.color || coloresEventos[evento.tipo || 'evento']
      })
    }
  }, [evento.id, evento.modo])
  
  // Actualizar los textos de fecha cuando cambia eventoEditado
  useEffect(() => {
    setFechaInicioTexto(formatearFechaParaMostrar(eventoEditado.inicio))
    setFechaFinTexto(formatearFechaParaMostrar(eventoEditado.fin))
  }, [eventoEditado.inicio, eventoEditado.fin, eventoEditado.diaCompleto])
  
  // Formatear fechas para mostrar al usuario (formato español)
  const formatearFechaParaMostrar = (fecha) => {
    if (!fecha) return ''
    try {
      const fechaObj = fecha instanceof Date ? fecha : new Date(fecha)
      if (isNaN(fechaObj.getTime())) throw new Error('Fecha inválida')
      
      return format(fechaObj, eventoEditado.diaCompleto ? 'dd/MM/yyyy' : 'dd/MM/yyyy HH:mm', { locale: es })
    } catch (error) {
      console.error('Error al formatear fecha para mostrar:', error)
      return ''
    }
  }
  
  // Formatear fechas para inputs de tipo date y datetime-local
  const formatearFechaParaInput = (fecha, incluirHora = true) => {
    if (!fecha) return ''
    try {
      const fechaObj = fecha instanceof Date ? fecha : new Date(fecha)
      if (isNaN(fechaObj.getTime())) return ''
      
      // Para inputs de tipo date, solo necesitamos YYYY-MM-DD
      if (!incluirHora) {
        return fechaObj.toISOString().split('T')[0]
      }
      
      // Para inputs de tipo datetime-local, necesitamos YYYY-MM-DDThh:mm
      const year = fechaObj.getFullYear()
      const month = String(fechaObj.getMonth() + 1).padStart(2, '0')
      const day = String(fechaObj.getDate()).padStart(2, '0')
      const hours = String(fechaObj.getHours()).padStart(2, '0')
      const minutes = String(fechaObj.getMinutes()).padStart(2, '0')
      
      return `${year}-${month}-${day}T${hours}:${minutes}`
    } catch (error) {
      console.error('Error al formatear fecha para input:', error)
      return ''
    }
  }
  
  // Parsear texto de fecha en formato español a objeto Date
  const parsearFechaDesdeTexto = (textoFecha, esDiaCompleto) => {
    try {
      // Intentar parsear en formato español
      const formatoEsperado = esDiaCompleto ? 'dd/MM/yyyy' : 'dd/MM/yyyy HH:mm'
      return parse(textoFecha, formatoEsperado, new Date(), { locale: es })
    } catch (error) {
      console.error('Error al parsear fecha desde texto:', error)
      return null
    }
  }
  
  // Manejar cambio en el texto de fecha de inicio
  const handleFechaInicioTextoChange = (e) => {
    const nuevoTexto = e.target.value
    setFechaInicioTexto(nuevoTexto)
    
    try {
      const nuevaFecha = parsearFechaDesdeTexto(nuevoTexto, eventoEditado.diaCompleto)
      
      if (!nuevaFecha || isNaN(nuevaFecha.getTime())) {
        setErrorInicio('Formato de fecha inválido')
        return
      }
      
      setErrorInicio('')
      setEventoEditado(prev => ({
        ...prev,
        inicio: nuevaFecha
      }))
      
      // Si la fecha de inicio es posterior a la de fin, actualizar la de fin
      if (eventoEditado.fin && nuevaFecha > eventoEditado.fin) {
        const nuevaFechaFin = new Date(nuevaFecha)
        nuevaFechaFin.setHours(nuevaFecha.getHours() + 1)
        
        setEventoEditado(prev => ({
          ...prev,
          fin: nuevaFechaFin
        }))
        setFechaFinTexto(formatearFechaParaMostrar(nuevaFechaFin))
      }
    } catch (error) {
      console.error('Error al procesar fecha de inicio:', error)
      setErrorInicio('Formato de fecha inválido')
    }
  }
  
  // Manejar cambio en el texto de fecha de fin
  const handleFechaFinTextoChange = (e) => {
    const nuevoTexto = e.target.value
    setFechaFinTexto(nuevoTexto)
    
    try {
      const nuevaFecha = parsearFechaDesdeTexto(nuevoTexto, eventoEditado.diaCompleto)
      
      if (!nuevaFecha || isNaN(nuevaFecha.getTime())) {
        setErrorFin('Formato de fecha inválido')
        return
      }
      
      // Verificar que la fecha de fin es posterior a la de inicio
      if (eventoEditado.inicio && nuevaFecha < eventoEditado.inicio) {
        setErrorFin('La fecha de fin debe ser posterior a la de inicio')
        return
      }
      
      setErrorFin('')
      setEventoEditado(prev => ({
        ...prev,
        fin: nuevaFecha
      }))
    } catch (error) {
      console.error('Error al procesar fecha de fin:', error)
      setErrorFin('Formato de fecha inválido')
    }
  }
  
  // Manejar cambios en los inputs
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target
    
    if (type === 'checkbox') {
      setEventoEditado({ ...eventoEditado, [name]: checked })
      
      // Si se cambia a día completo, ajustar las horas
      if (name === 'diaCompleto' && checked) {
        const inicioAjustado = new Date(eventoEditado.inicio)
        inicioAjustado.setHours(0, 0, 0, 0)
        
        const finAjustado = new Date(eventoEditado.fin)
        finAjustado.setHours(23, 59, 59, 999)
        
        setEventoEditado(prev => ({
          ...prev,
          inicio: inicioAjustado,
          fin: finAjustado
        }))
        
        // Actualizar los textos de las fechas
        setFechaInicioTexto(formatearFechaParaMostrar(inicioAjustado))
        setFechaFinTexto(formatearFechaParaMostrar(finAjustado))
      }
    } else if (name === 'inicio' || name === 'fin') {
      try {
        // Crear un nuevo objeto Date a partir del valor del input
        const fechaObj = new Date(value)
        
        // Verificar que la fecha es válida
        if (isNaN(fechaObj.getTime())) {
          console.error('Fecha inválida:', value)
          return
        }
        
        // Si cambia la fecha de inicio y es posterior a la fecha de fin, actualizar la fecha de fin
        if (name === 'inicio' && eventoEditado.fin && fechaObj > eventoEditado.fin) {
          const nuevaFechaFin = new Date(fechaObj)
          nuevaFechaFin.setHours(fechaObj.getHours() + 1)
          
          setEventoEditado({ 
            ...eventoEditado, 
            [name]: fechaObj,
            fin: nuevaFechaFin
          })
          
          // Actualizar el texto de la fecha de fin
          setFechaFinTexto(formatearFechaParaMostrar(nuevaFechaFin))
        } else {
          setEventoEditado({ ...eventoEditado, [name]: fechaObj })
        }
        
        // Actualizar el texto de la fecha que cambió
        if (name === 'inicio') {
          setFechaInicioTexto(formatearFechaParaMostrar(fechaObj))
          setErrorInicio('')
        } else if (name === 'fin') {
          setFechaFinTexto(formatearFechaParaMostrar(fechaObj))
          setErrorFin('')
        }
      } catch (error) {
        console.error('Error al procesar la fecha:', error)
      }
    } else if (name === 'tipo') {
      // Cuando cambia el tipo de evento, asignar automáticamente el color según la leyenda
      let colorAsignado;
      
      // Priorizar el tipo_evento (personal o departamental) para la asignación de color
      if (eventoEditado.tipo_evento === 'departamental') {
        colorAsignado = coloresEventos.departamental;
      } else {
        colorAsignado = coloresEventos[value] || coloresEventos.evento;
      }
      
      setEventoEditado({ 
        ...eventoEditado, 
        [name]: value,
        color: colorAsignado  // Asignar automáticamente el color
      })
    } else if (name === 'tipo_evento') {
      // Cuando cambia el tipo de evento (personal/departamental), asignar automáticamente el color
      let colorAsignado;
      
      if (value === 'departamental') {
        colorAsignado = coloresEventos.departamental;
      } else {
        // Para eventos personales, usar el color del tipo de evento o el predeterminado
        colorAsignado = coloresEventos[eventoEditado.tipo] || coloresEventos.personal;
      }
      
      setEventoEditado({
        ...eventoEditado,
        [name]: value,
        color: colorAsignado
      })
    } else {
      setEventoEditado({ ...eventoEditado, [name]: value })
    }
  }
  
  // Manejar envío del formulario
  const handleSubmit = (e) => {
    e.preventDefault()
    
    // Validar que la fecha de fin sea posterior a la de inicio
    if (eventoEditado.fin < eventoEditado.inicio) {
      alert('La fecha de fin debe ser posterior a la fecha de inicio')
      return
    }
    
    // Si es día completo, ajustar las horas
    let eventoFinal = { ...eventoEditado }
    
    if (eventoFinal.diaCompleto) {
      const inicioAjustado = new Date(eventoFinal.inicio)
      inicioAjustado.setHours(0, 0, 0, 0)
      
      const finAjustado = new Date(eventoFinal.fin)
      finAjustado.setHours(23, 59, 59, 999)
      
      eventoFinal = {
        ...eventoFinal,
        inicio: inicioAjustado,
        fin: finAjustado
      }
    }
    
    onSave(eventoFinal)
  }
  
  // Validar el formulario
  const esFormularioValido = () => {
    try {
      // Verificar que el título no esté vacío
      if (eventoEditado.titulo.trim() === '') return false
      
      // Verificar que la fecha de inicio sea válida
      const inicioFecha = new Date(eventoEditado.inicio)
      if (isNaN(inicioFecha.getTime())) return false
      
      // Si hay fecha de fin, verificar que sea válida y posterior a la de inicio
      if (eventoEditado.fin) {
        const finFecha = new Date(eventoEditado.fin)
        if (isNaN(finFecha.getTime())) return false
        
        // Para eventos que no son de día completo, verificar que fin sea posterior a inicio
        if (!eventoEditado.diaCompleto && finFecha < inicioFecha) return false
      }
      
      return true
    } catch (error) {
      console.error('Error al validar el formulario:', error)
      return false
    }
  }
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm overflow-y-auto h-full w-full z-50 flex items-center justify-center px-4">
      <div 
        className={`relative mx-auto p-5 md:p-6 rounded-xl shadow-2xl w-full max-w-3xl overflow-hidden ${isDarkMode ? 'bg-gray-800 text-gray-200 border border-gray-700' : 'bg-white text-gray-800 border border-gray-200'}`}
        onClick={(e) => e.stopPropagation()}
        style={{
          transition: 'all 0.3s ease-in-out',
          boxShadow: isDarkMode ? '0 10px 30px -5px rgba(0, 0, 0, 0.7)' : '0 10px 30px -5px rgba(0, 0, 0, 0.2)',
          maxHeight: '90vh',
          overflowY: 'auto'
        }}
      >
        <button 
          onClick={onClose}
          className={`absolute top-4 right-4 p-1.5 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors z-10 ${isDarkMode ? 'text-gray-400 hover:text-gray-200' : 'text-gray-500 hover:text-gray-700'}`}
          aria-label="Cerrar"
        >
          <MdClose className="h-6 w-6" />
        </button>
        
        <h2 className="text-2xl font-bold mb-5 flex items-center">
          <MdEvent className="mr-2 text-blue-500" size={24} />
          {eventoEditado.modo === 'crear' ? 'Crear nuevo evento' : 'Detalles del evento'}
        </h2>
        
        {/* Modo visualización */}
        {eventoEditado.modo === 'ver' && (
          <div className="space-y-5">
            <div className="flex items-start bg-gray-50 dark:bg-gray-700/40 p-4 rounded-lg">
              <div 
                className="w-5 h-5 rounded-full flex-shrink-0 mt-1 mr-3" 
                style={{ backgroundColor: eventoEditado.color }}
              ></div>
              <div className="flex-1">
                <h3 className="text-xl font-semibold">{eventoEditado.titulo}</h3>
                {eventoEditado.descripcion && (
                  <p className={`mt-2 ${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                    {eventoEditado.descripcion}
                  </p>
                )}
              </div>
            </div>
            
            <div className={`px-5 py-4 rounded-lg shadow-sm border-l-4 ${isDarkMode ? 'bg-gray-700/50 border-blue-500' : 'bg-blue-50 border-blue-500'}`}>
              <div className="flex items-center mb-3">
                <FaCalendarAlt className="mr-2 text-blue-500" size={18} />
                <span className="font-medium text-lg">
                  {eventoEditado.diaCompleto ? 'Todo el día' : 'Horario'}
                </span>
              </div>
              
              <p className="ml-7 text-base">
                {formatearFechaParaMostrar(eventoEditado.inicio)}
                {!eventoEditado.diaCompleto && eventoEditado.fin && (
                  <> hasta {formatearFechaParaMostrar(eventoEditado.fin)}</>
                )}
              </p>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="flex items-center p-3 rounded-lg border dark:border-gray-600">
                <MdColorLens className="mr-2 text-gray-500" size={20} />
                <div>
                  <span className="font-medium block mb-1">Tipo de evento:</span>
                  <div className="flex items-center">
                    <span 
                      className="inline-block w-4 h-4 rounded-full mr-2"
                      style={{ backgroundColor: eventoEditado.color }}
                    ></span>
                    {tiposEventos.find(t => t.value === eventoEditado.tipo)?.label || 'Evento'}
                  </div>
                </div>
              </div>
              
              {eventoEditado.tipo_evento && (
                <div className="flex items-center p-3 rounded-lg border dark:border-gray-600">
                  {eventoEditado.tipo_evento === 'departamental' ? (
                    <FaUsers className="mr-2 text-purple-500" size={18} />
                  ) : (
                    <FaUser className="mr-2 text-blue-500" size={18} />
                  )}
                  <div>
                    <span className="font-medium block mb-1">Visibilidad:</span>
                    <div className="flex items-center">
                      {eventoEditado.tipo_evento === 'departamental' ? (
                        <span className="text-purple-600 dark:text-purple-400">Departamental</span>
                      ) : (
                        <span className="text-blue-600 dark:text-blue-400">Personal</span>
                      )}
                    </div>
                  </div>
                </div>
              )}
              
              {eventoEditado.creador && (
                <div className="flex items-center p-3 rounded-lg border dark:border-gray-600">
                  <FaUser className="mr-2 text-gray-500" size={18} />
                  <div>
                    <span className="font-medium block mb-1">Creado por:</span>
                    <span>{eventoEditado.creador}</span>
                  </div>
                </div>
              )}
            </div>
            
            {!soloLectura && (
              <div className="flex justify-between mt-6 pt-4 border-t dark:border-gray-600">
                <button
                  onClick={() => setEventoEditado({...eventoEditado, modo: 'editar'})}
                  className="px-4 py-2 rounded-lg flex items-center space-x-2 bg-blue-500 hover:bg-blue-600 text-white transition-colors"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                  </svg>
                  <span>Editar</span>
                </button>
                
                <button
                  onClick={() => onDelete(eventoEditado.id)}
                  className="px-4 py-2 rounded-lg flex items-center space-x-2 bg-red-500 hover:bg-red-600 text-white transition-colors"
                >
                  <FaTrash className="h-5 w-5" />
                  <span>Eliminar</span>
                </button>
              </div>
            )}
          </div>
        )}
        
        {/* Modo edicio00f3n o creaci00f3n */}
        {(eventoEditado.modo === 'editar' || eventoEditado.modo === 'crear') && (
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Secci00f3n de Datos B00e1sicos */}
            <div className={`p-4 rounded-lg border-l-4 mb-6 ${isDarkMode ? 'bg-gray-700/50 border-blue-500' : 'bg-blue-50 border-blue-500'}`}>
              <h3 className="text-lg font-semibold mb-4 flex items-center">
                <MdTitle className="mr-2 text-blue-500" size={22} />
                Datos Básicos
              </h3>
              
              <div className="mb-4">
                <label
                  htmlFor="titulo"
                  className="text-sm font-medium mb-1.5 flex items-center"
                >
                  <MdTitle className="mr-1.5 text-gray-500" size={16} />
                  Título del evento *
                </label>
                <input
                  type="text"
                  id="titulo"
                  name="titulo"
                  value={eventoEditado.titulo}
                  onChange={handleChange}
                  required
                  className={`w-full p-3 rounded-lg border ${
                    isDarkMode 
                      ? 'bg-gray-800 border-gray-600 text-white focus:ring-2 focus:ring-blue-600 focus:border-transparent' 
                      : 'bg-white border-gray-300 text-gray-900 focus:ring-2 focus:ring-blue-600 focus:border-transparent'
                  }`}
                  placeholder="Ej: Reunión de equipo, Formación GDPR..."
                  disabled={soloLectura}
                />
              </div>
              
              <div className="mb-4">
                <label className="text-sm font-medium mb-1.5 flex items-center">
                  <MdDescription className="mr-1.5 text-gray-500" size={16} />
                  Descripción (opcional)
                </label>
                <textarea
                  name="descripcion"
                  value={eventoEditado.descripcion || ''}
                  onChange={handleChange}
                  className={`w-full p-3 rounded-lg border ${
                    isDarkMode 
                      ? 'bg-gray-800 border-gray-600 text-white focus:ring-2 focus:ring-blue-600 focus:border-transparent' 
                      : 'bg-white border-gray-300 text-gray-900 focus:ring-2 focus:ring-blue-600 focus:border-transparent'
                  }`}
                  placeholder="Añade detalles sobre el evento..."
                  rows="3"
                  disabled={soloLectura}
                />
              </div>
            </div>

            {/* Secci00f3n de tipo y color */}
            <div className={`p-4 rounded-lg border-l-4 mb-6 ${isDarkMode ? 'bg-gray-700/50 border-purple-500' : 'bg-gray-50 border-purple-500'}`}>
              <h3 className="text-lg font-semibold mb-4 flex items-center">
                <MdEvent className="mr-2 text-purple-500" size={22} />
                Tipo y visualización
              </h3>
              
              <div className="flex flex-wrap -mx-2">
                <div className="px-2 w-full md:w-1/2 mb-4">
                  <label className="text-sm font-medium mb-1.5 flex items-center">
                    <MdEvent className="mr-1.5 text-gray-500" size={16} />
                    Tipo de evento
                  </label>
                  <select
                    name="tipo"
                    value={eventoEditado.tipo || 'evento'}
                    onChange={handleChange}
                    className={`w-full p-3 rounded-lg border ${
                      isDarkMode 
                        ? 'bg-gray-800 border-gray-600 text-white' 
                        : 'bg-white border-gray-300 text-gray-900'
                    }`}
                    disabled={soloLectura}
                  >
                    <option value="evento">Evento general</option>
                    <option value="reunion">Reunión</option>
                    <option value="formacion">Formación</option>
                    <option value="proyecto">Proyecto</option>
                    <option value="ausencia">Ausencia</option>
                  </select>
                </div>
                
                <div className="px-2 w-full md:w-1/2 mb-4">
                  <label className="text-sm font-medium mb-1.5 flex items-center">
                    <MdColorLens className="mr-1.5 text-gray-500" size={16} />
                    Color del evento
                  </label>
                  <div className={`flex items-center p-2 rounded-lg border ${isDarkMode ? 'bg-gray-800 border-gray-600' : 'bg-white border-gray-300'}`}>
                    <input
                      type="color"
                      name="color"
                      value={eventoEditado.color || '#3788d8'}
                      onChange={handleChange}
                      className="h-10 w-12 rounded cursor-pointer border-0"
                      disabled={soloLectura}
                    />
                    <span className="ml-3 font-mono">{eventoEditado.color}</span>
                    
                    {/* Paleta r00e1pida de colores */}
                    <div className="ml-auto flex space-x-1">
                      {Object.values(coloresEventos).map((color, index) => (
                        <div
                          key={index}
                          className="w-6 h-6 rounded-full cursor-pointer hover:opacity-80 transition-opacity"
                          style={{ backgroundColor: color }}
                          onClick={() => handleChange({ target: { name: 'color', value: color } })}
                        />
                      ))}
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Campo para seleccionar si es un evento personal o departamental */}
              <div className="mb-4">
                <label className="text-sm font-medium mb-2 flex items-center">
                  <FaUsers className="mr-1.5 text-gray-500" size={14} />
                  Visibilidad del evento
                </label>
                <div className={`grid grid-cols-1 md:grid-cols-2 gap-3 p-2 rounded-lg border ${isDarkMode ? 'border-gray-600' : 'border-gray-300'}`}>
                  <label className={`flex items-center p-3 rounded-lg ${eventoEditado.tipo_evento === 'departamental' ? (isDarkMode ? 'bg-purple-900 bg-opacity-50' : 'bg-purple-100') : ''} cursor-pointer transition-colors`}>
                    <input
                      type="radio"
                      name="tipo_evento"
                      value="departamental"
                      checked={eventoEditado.tipo_evento === 'departamental'}
                      onChange={handleChange}
                      className="mr-2 h-4 w-4 text-purple-600"
                      disabled={soloLectura}
                    />
                    <div>
                      <span className="flex items-center text-sm font-medium">
                        <FaUsers className="mr-2 text-purple-600" />
                        Departamental
                      </span>
                      <span className="text-xs block mt-1 opacity-70">Visible para todos los usuarios</span>
                    </div>
                  </label>
                  
                  <label className={`flex items-center p-3 rounded-lg ${eventoEditado.tipo_evento === 'personal' ? (isDarkMode ? 'bg-blue-900 bg-opacity-50' : 'bg-blue-100') : ''} cursor-pointer transition-colors`}>
                    <input
                      type="radio"
                      name="tipo_evento"
                      value="personal"
                      checked={eventoEditado.tipo_evento === 'personal'}
                      onChange={handleChange}
                      className="mr-2 h-4 w-4 text-blue-600"
                      disabled={soloLectura}
                    />
                    <div>
                      <span className="flex items-center text-sm font-medium">
                        <FaUser className="mr-2 text-blue-600" />
                        Personal
                      </span>
                      <span className="text-xs block mt-1 opacity-70">Solo visible para ti</span>
                    </div>
                  </label>
                </div>
              </div>
            </div>
